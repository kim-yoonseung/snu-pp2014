open CommonGrade
open Hw9_1
open Duststorm

exception Ta_Out_of_loop

let isOnSegment ((xi:float),  (yi:float), (xj:float), (yj:float), (xk:float), (yk:float)) =
  (xi <= xk || xj <= xk) && (xk <= xi || xk <= xj) &&
  (yi <= yk || yj <= yk) && (yk <= yi || yk <= yj)

let computeDirection ((xi:float), (yi:float), (xj:float), (yj:float), (xk:float), (yk:float)) =
  let a = (xk -. xi) *. (yj -. yi) in
  let b = (xj -. xi) *. (yk -. yi) in
    if (a < b) then -1
    else if (a > b) then 1
    else 0

let doLineSegmentsIntersect ((x1:float), (y1:float), (x2:float), (y2:float), (x3:float), (y3:float), (x4:float), (y4:float)) =
  let d1 = computeDirection (x3, y3, x4, y4, x1, y1) in
  let d2 = computeDirection (x3, y3, x4, y4, x2, y2) in
  let d3 = computeDirection (x1, y1, x2, y2, x3, y3) in
  let d4 = computeDirection (x1, y1, x2, y2, x4, y4) in
    (((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) && ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) ||
    (d1 == 0 && isOnSegment(x3, y3, x4, y4, x1, y1)) ||
    (d2 == 0 && isOnSegment(x3, y3, x4, y4, x2, y2)) ||
    (d3 == 0 && isOnSegment(x1, y1, x2, y2, x3, y3)) ||
    (d4 == 0 && isOnSegment(x1, y1, x2, y2, x4, y4))

let isIntersect rloc1 rloc2 sloc1 sloc2 =
  doLineSegmentsIntersect (float_of_int (fst rloc1), float_of_int (snd rloc1), float_of_int (fst sloc1), float_of_int (snd sloc1), float_of_int (fst rloc2), float_of_int (snd rloc2), float_of_int (fst sloc2), float_of_int (snd sloc2))

let hasIntersectArray r_array s_array =
  let result = ref false in
    (try (
      for i = 0 to (Array.length r_array)-1 do
        for j = i+1 to (Array.length (r_array))-1 do
          (if isIntersect (snd (r_array).(i)) (snd (r_array).(j)) (snd (s_array).(i)) (snd (s_array).(j)) then
             (result := true;
              (raise Ta_Out_of_loop))
           else
             ())
        done
      done)
     with Ta_Out_of_loop -> ());
    !result

let hasIntersect rList sList rsList=
  let (rl,sl) = List.split rsList in
  let rec sortlst l lst=
    match l with
      | [] -> []
      | h::t -> (List.find (fun x -> (fst x) = h) lst)::(sortlst t lst) in
  let rList' = sortlst rl rList in
  let sList' = sortlst sl sList in
    hasIntersectArray (Array.of_list rList') (Array.of_list sList')

(*
let (robots1, shelters1) =  ([("r1", (23, 52)); ("r2", (38, 35)); ("r3", (86, 12)); ("r4", (4, 1));
                              ("r5", (27, 65)); ("r6", (72, 38)); ("r7", (27, 65)); ("r8", (26, 5));
                              ("r9", (18, 92)); ("r10", (68, 39))],
                             [(1, (88, 12)); (2, (65, 66)); (3, (85, 27)); (4, (9, 96)); (5, (70, 72));
                              (6, (99, 68)); (7, (92, 95)); (8, (36, 35)); (9, (1, 43)); (10, (18, 72))])

let (robots2, shelters2) = ([("r1", (66, 13)); ("r2", (87, 35)); ("r3", (1, 1)); ("r4", (35, 71));
                             ("r5", (31, 91)); ("r6", (5, 10)); ("r7", (26, 33)); ("r8", (89, 27));
                             ("r9", (3, 49)); ("r10", (94, 86))],
                            [(1, (52, 38)); (2, (66, 38)); (3, (63, 44)); (4, (51, 6)); (5, (0, 93));
                             (6, (71, 78)); (7, (77, 11)); (8, (48, 41)); (9, (58, 19)); (10, (71, 48))])

let (robots3, shelters3) =  ([("r1", (1, 12)); ("r2", (65, 17)); ("r3", (88, 22)); ("r4", (35, 73));
                              ("r5", (47, 70)); ("r6", (21, 96)); ("r7", (0, 85)); ("r8", (22, 32));
                              ("r9", (31, 63)); ("r10", (78, 22)); ("r11", (4, 94)); ("r12", (19, 70));
                              ("r13", (77, 6)); ("r14", (20, 92)); ("r15", (89, 15)); ("r16", (90, 90));
                              ("r17", (90, 35)); ("r18", (59, 97)); ("r19", (37, 30)); ("r20", (95, 51))],
                             [(1, (64, 56)); (2, (83, 78)); (3, (64, 80)); (4, (27, 21)); (5, (61, 83));
                              (6, (46, 7)); (7, (10, 96)); (8, (18, 59)); (9, (8, 85)); (10, (37, 68));
                              (11, (62, 59)); (12, (42, 7)); (13, (75, 19)); (14, (92, 80));
                              (15, (83, 37)); (16, (18, 16)); (17, (100, 95)); (18, (56, 43));
                              (19, (74, 68)); (20, (89, 46))])

let (robots4, shelters4) =  ([("r1", (39, 42)); ("r2", (100, 99)); ("r3", (66, 40)); ("r4", (61, 9));
                              ("r5", (1, 38)); ("r6", (23, 22)); ("r7", (8, 33)); ("r8", (64, 79));
                              ("r9", (10, 26)); ("r10", (85, 20)); ("r11", (3, 72)); ("r12", (3, 66));
                              ("r13", (60, 31)); ("r14", (13, 69)); ("r15", (80, 88)); ("r16", (75, 71));
                              ("r17", (27, 1)); ("r18", (23, 89)); ("r19", (58, 43)); ("r20", (49, 33));
				("r21",(22, 5))],
                             [(1, (17, 39)); (2, (28, 1)); (3, (99, 15)); (4, (38, 0)); (5, (58, 76));
                              (6, (100, 90)); (7, (17, 4)); (8, (56, 40)); (9, (50, 82)); (10, (27, 96));
                              (11, (63, 28)); (12, (39, 18)); (13, (94, 28)); (14, (59, 29));
                              (15, (11, 66)); (16, (65, 12)); (17, (4, 27)); (18, (87, 12));
                              (19, (49, 85)); (20, (90, 41)); (21, (33,36)) ])

let (robots5, shelters5) =  ([("r1", (89, 91)); ("r2", (96, 73)); ("r3", (49, 70)); ("r4", (38, 38));
                              ("r5", (3, 16)); ("r6", (34, 89)); ("r7", (60, 100)); ("r8", (87, 99));
                              ("r9", (96, 9)); ("r10", (59, 47))],
                             [(1, (73, 11)); (2, (2, 43)); (3, (56, 68)); (4, (84, 11)); (5, (78, 0));
                              (6, (31, 81)); (7, (57, 51)); (8, (2, 73)); (9, (73, 2)); (10, (98, 22))])

let (robots6, shelters6) = ([("r1", (85, 90)); ("r2", (32, 8)); ("r3", (76, 53)); ("r4", (75, 29));
                             ("r5", (64, 65)); ("r6", (39, 81)); ("r7", (34, 54)); ("r8", (72, 5));
                             ("r9", (14, 48)); ("r10", (26, 25)); ("r11", (8, 85)); ("r12", (71, 99));
                             ("r13", (19, 96)); ("r14", (52, 72)); ("r15", (35, 90)); ("r16", (5, 54));
                             ("r17", (17, 75)); ("r18", (100, 48)); ("r19", (74, 100));
                             ("r20", (42, 86))],
                            [(1, (6, 93)); (2, (71, 87)); (3, (61, 36)); (4, (93, 67)); (5, (12, 10));
                             (6, (52, 44)); (7, (87, 51)); (8, (68, 7)); (9, (80, 87)); (10, (42, 84));
                             (11, (83, 10)); (12, (39, 80)); (13, (11, 81)); (14, (53, 38));
                             (15, (91, 91)); (16, (23, 97)); (17, (95, 20)); (18, (20, 80));
                             (19, (65, 52)); (20, (89, 63))])

let (robots7, shelters7) = ([("r1", (91, 97)); ("r2", (90, 25)); ("r3", (30, 62)); ("r4", (30, 64));
                             ("r5", (2, 75)); ("r6", (8, 67)); ("r7", (88, 40)); ("r8", (73, 8));
                             ("r9", (1, 31)); ("r10", (59, 16)); ("r11", (47, 66)); ("r12", (70, 100));
                             ("r13", (91, 1)); ("r14", (42, 53)); ("r15", (24, 55)); ("r16", (58, 24));
                             ("r17", (39, 4)); ("r18", (87, 73)); ("r19", (41, 18)); ("r20", (87, 86))],
                            [(1, (69, 54)); (2, (21, 19)); (3, (18, 47)); (4, (96, 22)); (5, (52, 87));
                             (6, (31, 19)); (7, (14, 29)); (8, (81, 12)); (9, (61, 81));
                             (10, (100, 14)); (11, (71, 37)); (12, (62, 71)); (13, (39, 24));
                             (14, (41, 95)); (15, (94, 11)); (16, (85, 42)); (17, (35, 53));
                             (18, (96, 63)); (19, (4, 65)); (20, (71, 48))])

let (robots8, shelters8) = ([("r1", (1, 12)); ("r2", (65, 17)); ("r3", (88, 22)); ("r4", (35, 73));
                             ("r5", (47, 70)); ("r6", (21, 96)); ("r7", (0, 85)); ("r8", (22, 32));
                             ("r9", (31, 63)); ("r10", (78, 22)); ("r11", (4, 94)); ("r12", (19, 70));
                             ("r13", (77, 6)); ("r14", (20, 92)); ("r15", (89, 15)); ("r16", (90, 90));
                             ("r17", (90, 73)); ("r18", (59, 97)); ("r19", (37, 30)); ("r20", (95, 51))
				; ("r21", (35,23))],
                            [(1, (64, 56)); (2, (83, 78)); (3, (64, 80)); (4, (27, 21)); (5, (61, 83));
                             (6, (46, 7)); (7, (10, 96)); (8, (18, 59)); (9, (8, 78)); (10, (37, 68));
                             (11, (62, 59)); (12, (42, 7)); (13, (75, 19)); (14, (98, 80));
                             (15, (83, 37)); (16, (18, 16)); (17, (100, 95)); (18, (56, 43));
                             (19, (74, 68)); (20, (89, 46))])

let (robots9, shelters9) = ([("r1", (8, 76)); ("r2", (99, 97)); ("r3", (98, 100)); ("r4", (63, 15));
                             ("r5", (10, 91)); ("r6", (54, 11)); ("r7", (93, 58)); ("r8", (23, 2));
                             ("r9", (50, 41)); ("r10", (96, 65)); ("r11", (17, 20)); ("r12", (59, 82));
                             ("r13", (78, 85)); ("r14", (87, 97)); ("r15", (42, 93)); ("r16", (49, 82));
                             ("r17", (5, 27)); ("r18", (67, 0)); ("r19", (33, 46)); ("r20", (34, 53))],
                            [(1, (61, 62)); (2, (98, 4)); (3, (55, 14)); (4, (64, 30)); (5, (8, 90));
                             (6, (80, 41)); (7, (46, 31)); (8, (60, 7)); (9, (76, 86)); (10, (92, 85));
                             (11, (97, 39)); (12, (17, 11)); (13, (95, 15)); (14, (3, 3));
                             (15, (38, 25)); (16, (86, 40)); (17, (52, 10)); (18, (34, 93));
                             (19, (95, 72)); (20, (74, 5))])


let (robots10, shelters10) = ([("r1", (1, 12)); ("r2", (65, 17)); ("r3", (88, 22)); ("r4", (35, 73));
                               ("r5", (47, 70)); ("r6", (21, 96)); ("r7", (0, 85)); ("r8", (22, 32));
                               ("r9", (31, 63)); ("r10", (78, 22)); ("r11", (4, 94)); ("r12", (19, 70));
                               ("r13", (77, 6)); ("r14", (20, 92)); ("r15", (89, 15)); ("r16", (90, 90));
                               ("r17", (90, 73)); ("r18", (59, 97)); ("r19", (37, 30)); ("r20", (95, 51))],
                              [(1, (64, 56)); (2, (83, 78)); (3, (64, 80)); (4, (27, 21)); (5, (61, 83));
                               (6, (46, 7)); (7, (10, 96)); (8, (18, 59)); (9, (8, 78)); (10, (37, 68));
                               (11, (62, 59)); (12, (42, 7)); (13, (75, 19)); (14, (98, 80));
                               (15, (83, 37)); (16, (18, 16)); (17, (100, 95)); (18, (56, 43));
                               (19, (74, 68)); (20, (89, 46))])
*)

let (robots1, shelters1) = ([("r1", (29, 44)); ("r2", (24, 71)); ("r3", (70, 2)); ("r4", (6, 26)); ("r5", (43, 55))],[(1, (29, 44)); (2, (24, 71)); (3, (70, 2)); (4, (6, 26)); (5, (43, 55))])

let (robots2, shelters2) = ([("r1", (99, 9)); ("r2", (27, 18)); ("r3", (92, 11)); ("r4", (55, 4)); ("r5", (74, 53)); ("r6", (52, 55)); ("r7", (78, 77)); ("r8", (30, 40))],[(1, (99, 9)); (2, (27, 18)); (3, (92, 11)); (4, (55, 4)); (5, (74, 53)); (6, (52, 55)); (7, (78, 77)); (8, (30, 40))])

let (robots3, shelters3) = ([("r1", (45, 7)); ("r2", (14, 10)); ("r3", (21, 90)); ("r4", (75, 31)); ("r5", (71, 45)); ("r6", (53, 60)); ("r7", (52, 16)); ("r8", (74, 44)); ("r9", (48, 60)); ("r10", (13, 1))],[(1, (45, 7)); (2, (14, 10)); (3, (21, 90)); (4, (75, 31)); (5, (71, 45)); (6, (53, 60)); (7, (52, 16)); (8, (74, 44)); (9, (48, 60)); (10, (13, 1))])

let (robots4, shelters4) = ([("r1", (45, 99)); ("r2", (6, 69)); ("r3", (21, 13)); ("r4", (21, 95)); ("r5", (29, 84)); ("r6", (92, 98)); ("r7", (31, 33)); ("r8", (72, 48)); ("r9", (47, 13)); ("r10", (79, 51)); ("r11", (64, 94)); ("r12", (87, 67)); ("r13", (52, 54)); ("r14", (52, 43)); ("r15", (75, 12))],[(1, (45, 99)); (2, (6, 69)); (3, (21, 13)); (4, (21, 95)); (5, (29, 84)); (6, (92, 98)); (7, (31, 33)); (8, (72, 48)); (9, (47, 13)); (10, (79, 51)); (11, (64, 94)); (12, (87, 67)); (13, (52, 54)); (14, (52, 43)); (15, (75, 12))])

let (robots5, shelters5) = ([("r1", (98, 13)); ("r2", (95, 50)); ("r3", (10, 85)); ("r4", (19, 90)); ("r5", (84, 15)); ("r6", (37, 43)); ("r7", (12, 87)); ("r8", (3, 61)); ("r9", (71, 34)); ("r10", (82, 99)); ("r11", (82, 81)); ("r12", (69, 31)); ("r13", (43, 7)); ("r14", (47, 68)); ("r15", (54, 67)); ("r16", (26, 81))],[(1, (98, 13)); (2, (95, 50)); (3, (10, 85)); (4, (19, 90)); (5, (84, 15)); (6, (37, 43)); (7, (12, 87)); (8, (3, 61)); (9, (71, 34)); (10, (82, 99)); (11, (82, 81)); (12, (69, 31)); (13, (43, 7)); (14, (47, 68)); (15, (54, 67)); (16, (26, 81))])

let (robots6, shelters6) = ([("r1", (61, 12)); ("r2", (15, 27)); ("r3", (97, 95)); ("r4", (99, 24)); ("r5", (15, 48)); ("r6", (13, 21)); ("r7", (29, 68)); ("r8", (13, 30)); ("r9", (41, 45)); ("r10", (72, 91)); ("r11", (24, 93)); ("r12", (43, 60)); ("r13", (94, 45)); ("r14", (73, 74)); ("r15", (84, 53)); ("r16", (91, 46)); ("r17", (16, 32)); ("r18", (51, 59))],[(1, (61, 12)); (2, (15, 27)); (3, (97, 95)); (4, (99, 24)); (5, (15, 48)); (6, (13, 21)); (7, (29, 68)); (8, (13, 30)); (9, (41, 45)); (10, (72, 91)); (11, (24, 93)); (12, (43, 60)); (13, (94, 45)); (14, (73, 74)); (15, (84, 53)); (16, (91, 46)); (17, (16, 32)); (18, (51, 59))])

let (robots7, shelters7) = ([("r1", (25, 2)); ("r2", (54, 96)); ("r3", (24, 24)); ("r4", (46, 45)); ("r5", (25, 99)); ("r6", (76, 58)); ("r7", (23, 93)); ("r8", (7, 8)); ("r9", (7, 1)); ("r10", (96, 89)); ("r11", (11, 99)); ("r12", (42, 91)); ("r13", (90, 26)); ("r14", (83, 53)); ("r15", (47, 79)); ("r16", (84, 52)); ("r17", (50, 79)); ("r18", (68, 25)); ("r19", (24, 13)); ("r20", (5, 33))],[(1, (25, 2)); (2, (54, 96)); (3, (24, 24)); (4, (46, 45)); (5, (25, 99)); (6, (76, 58)); (7, (23, 93)); (8, (7, 8)); (9, (7, 1)); (10, (96, 89)); (11, (11, 99)); (12, (42, 91)); (13, (90, 26)); (14, (83, 53)); (15, (47, 79)); (16, (84, 52)); (17, (50, 79)); (18, (68, 25)); (19, (24, 13)); (20, (5, 33))])

let (robots8, shelters8) = ([("r1", (10, 51)); ("r2", (44, 28)); ("r3", (42, 86)); ("r4", (78, 27)); ("r5", (99, 73)); ("r6", (36, 69)); ("r7", (6, 38)); ("r8", (24, 99)); ("r9", (50, 81)); ("r10", (9, 26)); ("r11", (12, 6)); ("r12", (32, 60)); ("r13", (31, 87)); ("r14", (56, 60)); ("r15", (97, 78)); ("r16", (77, 67)); ("r17", (46, 27)); ("r18", (50, 90)); ("r19", (93, 6)); ("r20", (63, 82))],[(1, (10, 51)); (2, (44, 28)); (3, (42, 86)); (4, (78, 27)); (5, (99, 73)); (6, (36, 69)); (7, (6, 38)); (8, (24, 99)); (9, (50, 81)); (10, (9, 26)); (11, (12, 6)); (12, (32, 60)); (13, (31, 87)); (14, (56, 60)); (15, (97, 78)); (16, (77, 67)); (17, (46, 27)); (18, (50, 90)); (19, (93, 6)); (20, (63, 82))])

let (robots9, shelters9) = ([("r1", (93, 9)); ("r2", (12, 89)); ("r3", (88, 1)); ("r4", (56, 32)); ("r5", (44, 69)); ("r6", (88, 90)); ("r7", (44, 52)); ("r8", (69, 87)); ("r9", (95, 20)); ("r10", (25, 93)); ("r11", (15, 70)); ("r12", (33, 38)); ("r13", (51, 89)); ("r14", (6, 91)); ("r15", (81, 86)); ("r16", (82, 84)); ("r17", (41, 64)); ("r18", (57, 99)); ("r19", (65, 16)); ("r20", (5, 98)); ("r21", (86, 98))],[(1, (93, 9)); (2, (12, 89)); (3, (88, 1)); (4, (56, 32)); (5, (44, 69)); (6, (88, 90)); (7, (44, 52)); (8, (69, 87)); (9, (95, 20)); (10, (25, 93)); (11, (15, 70)); (12, (33, 38)); (13, (51, 89)); (14, (6, 91)); (15, (81, 86)); (16, (82, 84)); (17, (41, 64)); (18, (57, 99)); (19, (65, 16)); (20, (5, 98)); (21, (86, 98))])

let (robots10, shelters10) = ([("r1", (1, 79)); ("r2", (47, 29)); ("r3", (1, 43)); ("r4", (12, 50)); ("r5", (36, 9)); ("r6", (85, 86)); ("r7", (5, 52)); ("r8", (20, 30)); ("r9", (68, 53)); ("r10", (68, 77)); ("r11", (7, 54)); ("r12", (20, 56)); ("r13", (16, 98)); ("r14", (98, 75)); ("r15", (25, 15)); ("r16", (44, 73)); ("r17", (26, 82)); ("r18", (57, 3)); ("r19", (54, 24)); ("r20", (4, 2)); ("r21", (10, 93)); ("r22", (56, 95))],[(1, (1, 79)); (2, (47, 29)); (3, (1, 43)); (4, (12, 50)); (5, (36, 9)); (6, (85, 86)); (7, (5, 52)); (8, (20, 30)); (9, (68, 53)); (10, (68, 77)); (11, (7, 54)); (12, (20, 56)); (13, (16, 98)); (14, (98, 75)); (15, (25, 15)); (16, (44, 73)); (17, (26, 82)); (18, (57, 3)); (19, (54, 24)); (20, (4, 2)); (21, (10, 93)); (22, (56, 95))])


let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots1 shelters1 in
     hasIntersect robots1 shelters1 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots2 shelters2 in
     hasIntersect robots2 shelters2 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots3 shelters3 in
     hasIntersect robots3 shelters3 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots4 shelters4 in
     hasIntersect robots4 shelters4 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots5 shelters5 in
     hasIntersect robots5 shelters5 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots6 shelters6 in
     hasIntersect robots6 shelters6 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots7 shelters7 in
     hasIntersect robots7 shelters7 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots8 shelters8 in
     hasIntersect robots8 shelters8 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots9 shelters9 in
     hasIntersect robots9 shelters9 ans = false)

let _ =
  output
    (fun () ->
     let ans = Duststorm.shelterAssign robots10 shelters10 in
     hasIntersect robots10 shelters10 ans = false)
